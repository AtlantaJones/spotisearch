// -------------------------------------
//   Helpers
// -------------------------------------
// ----- Placeholders, Extends, Mixins, and Functions
// -------------------------------------

// -------------------------------------
//   Placeholders
// -------------------------------------

// Image Replacement
%ir {
  background-color: transparent;
  border: 0;
  overflow: hidden;
  /* IE 6/7 fallback */
  *text-indent: -9999px;
}

%ir:before {
  content: "";
  display: block;
  width: 0;
  height: 150%;
}

// Clearfix
%clearfix:before,
%clearfix:after {
  // The space content is one way to avoid an Opera bug when the contenteditable attribute is included anywhere else in the document. Otherwise it causes space to appear at the top and bottom of elements that receive the `clearfix` class.
  content: " ";
  // The use of `table` rather than `block` is only necessary if using :before to contain the top-margins of child elements.
  display: table;
}

%clearfix:after {
  clear: both;
}

%clearfix {
  // For IE 6/7 only - Include this rule to trigger hasLayout and contain floats
  *zoom: 1;
}

// -------------------------------------
//   Functions
// -------------------------------------

// It strips the unit of measure and returns it
// @function strip-unit($num) {
//   @return $num / ($num * 0 + 1);
// }

// -------------------------------------
//   Mixins
// -------------------------------------
// @function convert-to-em($value)  {
//   $value: strip-unit($value) / strip-unit($em-base) * 1em;
//   @if ($value == 0em) { $value: 0; } // Turn 0em into 0
//   @return $value;
// }

// @function emCalc($values...) {
//   $max: length($values); // Get the total number of parameters passed

//   // If there is only 1 parameter, then return it as an integer.
//   // This is done because a list can't be multiplied or divided even if it contains a single value
//   @if $max == 1 { @return convert-to-em(nth($values, 1)); }

//   $emValues: (); // This will eventually store the converted $values in a list
//   @for $i from 1 through $max {
//     $emValues: append($emValues, convert-to-em(nth($values, $i)));
//   }
//   @return $emValues;
// }

// @mixin clearfix() {
//   *zoom:1;
//   &:before, &:after { content: " "; display: table; }
//   &:after { clear: both; }
// }

// @mixin button-size($padding:$button-med, $full-width:false, $is-input:false) {

//   // We control which padding styles come through,
//   // these can be turned off by setting $padding:false
//   @if $padding {
//     padding-top: $padding;
//     padding-#{$opposite-direction}: $padding * 2;
//     padding-bottom: $padding + emCalc(1);
//     padding-#{$default-float}: $padding * 2;

//     // We control the font-size based on mixin input.
//     @if      $padding == $button-med { font-size: $button-font-med; }
//     @else if $padding == $button-tny { font-size: $button-font-tny; }
//     @else if $padding == $button-sml { font-size: $button-font-sml; }
//     @else if $padding == $button-lrg { font-size: $button-font-lrg; }
//     @else                            { font-size: $padding - emCalc(2); }
//   }

//   // We can set $full-width:true to remove side padding extend width.
//   @if $full-width {
//     // We still need to check if $padding is set.
//     @if $padding {
//     padding-top: $padding;
//     padding-bottom: $padding + emCalc(1);
//     } @else if $padding == false {
//       padding-top:0;
//       padding-bottom:0;
//     }
//     padding-right: 0px;
//     padding-left: 0px;
//     width: 100%;
//   }

//   // <input>'s and <button>'s take on strange padding. We added this to help fix that.
//   @if $is-input == $button-lrg {
//     padding-top: $is-input + emCalc(.5);
//     padding-bottom: $is-input + emCalc(.5);
//     -webkit-appearance: none;
//   }
//   @else if $is-input {
//     padding-top: $is-input + emCalc(1);
//     padding-bottom: $is-input;
//     -webkit-appearance: none;
//   }
// }

// -------------------------------------
//   Utilities
// -------------------------------------